#!/usr/bin/env node

/**
 * Module dependencies.
 */


const app = require('../app');
const debug = require('debug')('caivscai:server');

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = require('http').Server(app);
const io = require('socket.io')(server);
app.set('io', io);

const  gameManager = require('../server/game/game_object_manager');
const  gameLogic = require('../server/game/game_logic')( io, gameManager );
const gameReceiver = require('../server/game/game_receiver')( io, gameLogic, gameManager );

const  chatManager = require('../server/chatroom/chat_object_manager');
const  chatLogic = require('../server/chatroom/chat_logic')( io, chatManager, gameLogic );
const chatReceiver = require('../server/chatroom/chat_receiver')( io, app.get('router'), chatLogic, chatManager, gameReceiver );

app.use('/', chatReceiver);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/*
io.on('connection', function (socket) {
	  socket.emit('initial', { hello: 'world' });
	  socket.on('update.single', function (data) {
	    console.log('got update data: ' + data);
	  });
	});
*/

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
	const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

	const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
	const addr = server.address();
	const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
